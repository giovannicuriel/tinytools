/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package br.giovannicuriel.tinytools



class Node(
    val key: String,
    val data: Double,
    val children: MutableList<Node>
) {

}

val getTree = Node(
    "get",
    1.0,
    mutableListOf(
        Node(
            "clients",
            2.0,
            mutableListOf<Node>()
        ),
        Node(
            "movies",
            3.0,
            mutableListOf<Node>()
        )
    )
)
val helpTree = Node(
    "help",
    2.9,
    mutableListOf()
)

class PatriciaTree {

    val rootNode = Node("^", 0.0, mutableListOf(
        getTree,
        helpTree
    ))

    fun getRemainderKey(commandKey: String, testedKey: String) = testedKey.substring(testedKey.commonPrefixWith(commandKey).length).trimStart().trimEnd()

    fun findNode(key: String, currNode: Node): Triple<Node, Boolean, String>?  =
        if (currNode.key.compareTo(key) == 0) {
            Triple(currNode, true, "")
        } else if (currNode.children.isEmpty()) {
            if (currNode.key.commonPrefixWith(key).length != 0) {
                val subKey = getRemainderKey(currNode.key, key)
                println("Subkey: >$subKey<, curr key >${currNode.key}<, key >${key}<")
                Triple(currNode, false, subKey)
            } else {
                null;
            }
        } else {
            if (key[0] == currNode.key[0]) {
                val subKey = getRemainderKey(currNode.key, key)

                currNode.children.firstNotNullOfOrNull {
                    findNode(subKey, it)
                } ?: Triple(currNode, false, subKey)
            } else {
                null
            }
        }

    fun findNode(key: String): Triple<Node, Boolean, String>? = rootNode.children.firstNotNullOfOrNull { findNode(key, it) }

    fun insertNode(key: String, data: Double) {
        val (node, isFound, subKey) = findNode(key) ?: Triple(rootNode, false, key)
        println("Current node is: ${node.key}, sub key is: >${subKey}<")
    }

}

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    println(App().greeting)
    val pt = PatriciaTree()

//    pt.findNode("get xtudo")?.let { (node, found) -> print("node ${node.key} was found? ${found}") }

    pt.insertNode("get client data", 10.9)
}
